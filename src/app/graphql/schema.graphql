schema {
  query: query_root
  mutation: mutation_root
  subscription: subscription_root
}

"""whether this query should be cached (Hasura Cloud only)"""
directive @cached(
  """measured in seconds"""
  ttl: Int! = 60

  """refresh the cache entry"""
  refresh: Boolean! = false
) on QUERY

"""
Boolean expression to compare columns of type "String". All fields are combined with logical 'AND'.
"""
input String_comparison_exp {
  _eq: String
  _gt: String
  _gte: String

  """does the column match the given case-insensitive pattern"""
  _ilike: String
  _in: [String!]

  """
  does the column match the given POSIX regular expression, case insensitive
  """
  _iregex: String
  _is_null: Boolean

  """does the column match the given pattern"""
  _like: String
  _lt: String
  _lte: String
  _neq: String

  """does the column NOT match the given case-insensitive pattern"""
  _nilike: String
  _nin: [String!]

  """
  does the column NOT match the given POSIX regular expression, case insensitive
  """
  _niregex: String

  """does the column NOT match the given pattern"""
  _nlike: String

  """
  does the column NOT match the given POSIX regular expression, case sensitive
  """
  _nregex: String

  """does the column NOT match the given SQL regular expression"""
  _nsimilar: String

  """
  does the column match the given POSIX regular expression, case sensitive
  """
  _regex: String

  """does the column match the given SQL regular expression"""
  _similar: String
}

"""this store all clients crooober id , name , phone, address """
type clients_info {
  ID: String!
  address: String
  name: String!
  phone: String
}

"""
aggregated selection of "clients_info"
"""
type clients_info_aggregate {
  aggregate: clients_info_aggregate_fields
  nodes: [clients_info!]!
}

"""
aggregate fields of "clients_info"
"""
type clients_info_aggregate_fields {
  count(columns: [clients_info_select_column!], distinct: Boolean): Int!
  max: clients_info_max_fields
  min: clients_info_min_fields
}

"""
Boolean expression to filter rows from the table "clients_info". All fields are combined with a logical 'AND'.
"""
input clients_info_bool_exp {
  ID: String_comparison_exp
  _and: [clients_info_bool_exp!]
  _not: clients_info_bool_exp
  _or: [clients_info_bool_exp!]
  address: String_comparison_exp
  name: String_comparison_exp
  phone: String_comparison_exp
}

"""
unique or primary key constraints on table "clients_info"
"""
enum clients_info_constraint {
  """
  unique or primary key constraint on columns "ID"
  """
  clients_info_ID_key

  """
  unique or primary key constraint on columns "ID"
  """
  clients_info_pkey
}

"""
input type for inserting data into table "clients_info"
"""
input clients_info_insert_input {
  ID: String
  address: String
  name: String
  phone: String
}

"""aggregate max on columns"""
type clients_info_max_fields {
  ID: String
  address: String
  name: String
  phone: String
}

"""aggregate min on columns"""
type clients_info_min_fields {
  ID: String
  address: String
  name: String
  phone: String
}

"""
response of any mutation on the table "clients_info"
"""
type clients_info_mutation_response {
  """number of rows affected by the mutation"""
  affected_rows: Int!

  """data from the rows affected by the mutation"""
  returning: [clients_info!]!
}

"""
on_conflict condition type for table "clients_info"
"""
input clients_info_on_conflict {
  constraint: clients_info_constraint!
  update_columns: [clients_info_update_column!]! = []
  where: clients_info_bool_exp
}

"""Ordering options when selecting data from "clients_info"."""
input clients_info_order_by {
  ID: order_by
  address: order_by
  name: order_by
  phone: order_by
}

"""primary key columns input for table: clients_info"""
input clients_info_pk_columns_input {
  ID: String!
}

"""
select columns of table "clients_info"
"""
enum clients_info_select_column {
  """column name"""
  ID

  """column name"""
  address

  """column name"""
  name

  """column name"""
  phone
}

"""
input type for updating data in table "clients_info"
"""
input clients_info_set_input {
  ID: String
  address: String
  name: String
  phone: String
}

"""
Streaming cursor of the table "clients_info"
"""
input clients_info_stream_cursor_input {
  """Stream column input with initial value"""
  initial_value: clients_info_stream_cursor_value_input!

  """cursor ordering"""
  ordering: cursor_ordering
}

"""Initial value of the column from where the streaming should start"""
input clients_info_stream_cursor_value_input {
  ID: String
  address: String
  name: String
  phone: String
}

"""
update columns of table "clients_info"
"""
enum clients_info_update_column {
  """column name"""
  ID

  """column name"""
  address

  """column name"""
  name

  """column name"""
  phone
}

input clients_info_updates {
  """sets the columns of the filtered rows to the given values"""
  _set: clients_info_set_input

  """filter the rows which have to be updated"""
  where: clients_info_bool_exp!
}

"""ordering argument of a cursor"""
enum cursor_ordering {
  """ascending ordering of the cursor"""
  ASC

  """descending ordering of the cursor"""
  DESC
}

"""mutation root"""
type mutation_root {
  """
  delete data from the table: "clients_info"
  """
  delete_clients_info(
    """filter the rows which have to be deleted"""
    where: clients_info_bool_exp!
  ): clients_info_mutation_response

  """
  delete single row from the table: "clients_info"
  """
  delete_clients_info_by_pk(ID: String!): clients_info

  """
  insert data into the table: "clients_info"
  """
  insert_clients_info(
    """the rows to be inserted"""
    objects: [clients_info_insert_input!]!

    """upsert condition"""
    on_conflict: clients_info_on_conflict
  ): clients_info_mutation_response

  """
  insert a single row into the table: "clients_info"
  """
  insert_clients_info_one(
    """the row to be inserted"""
    object: clients_info_insert_input!

    """upsert condition"""
    on_conflict: clients_info_on_conflict
  ): clients_info

  """
  update data of the table: "clients_info"
  """
  update_clients_info(
    """sets the columns of the filtered rows to the given values"""
    _set: clients_info_set_input

    """filter the rows which have to be updated"""
    where: clients_info_bool_exp!
  ): clients_info_mutation_response

  """
  update single row of the table: "clients_info"
  """
  update_clients_info_by_pk(
    """sets the columns of the filtered rows to the given values"""
    _set: clients_info_set_input
    pk_columns: clients_info_pk_columns_input!
  ): clients_info

  """
  update multiples rows of table: "clients_info"
  """
  update_clients_info_many(
    """updates to execute, in order"""
    updates: [clients_info_updates!]!
  ): [clients_info_mutation_response]
}

"""column ordering options"""
enum order_by {
  """in ascending order, nulls last"""
  asc

  """in ascending order, nulls first"""
  asc_nulls_first

  """in ascending order, nulls last"""
  asc_nulls_last

  """in descending order, nulls first"""
  desc

  """in descending order, nulls first"""
  desc_nulls_first

  """in descending order, nulls last"""
  desc_nulls_last
}

type query_root {
  """
  fetch data from the table: "clients_info"
  """
  clients_info(
    """distinct select on columns"""
    distinct_on: [clients_info_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [clients_info_order_by!]

    """filter the rows returned"""
    where: clients_info_bool_exp
  ): [clients_info!]!

  """
  fetch aggregated fields from the table: "clients_info"
  """
  clients_info_aggregate(
    """distinct select on columns"""
    distinct_on: [clients_info_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [clients_info_order_by!]

    """filter the rows returned"""
    where: clients_info_bool_exp
  ): clients_info_aggregate!

  """fetch data from the table: "clients_info" using primary key columns"""
  clients_info_by_pk(ID: String!): clients_info
}

type subscription_root {
  """
  fetch data from the table: "clients_info"
  """
  clients_info(
    """distinct select on columns"""
    distinct_on: [clients_info_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [clients_info_order_by!]

    """filter the rows returned"""
    where: clients_info_bool_exp
  ): [clients_info!]!

  """
  fetch aggregated fields from the table: "clients_info"
  """
  clients_info_aggregate(
    """distinct select on columns"""
    distinct_on: [clients_info_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [clients_info_order_by!]

    """filter the rows returned"""
    where: clients_info_bool_exp
  ): clients_info_aggregate!

  """fetch data from the table: "clients_info" using primary key columns"""
  clients_info_by_pk(ID: String!): clients_info

  """
  fetch data from the table in a streaming manner: "clients_info"
  """
  clients_info_stream(
    """maximum number of rows returned in a single batch"""
    batch_size: Int!

    """cursor to stream the results returned by the query"""
    cursor: [clients_info_stream_cursor_input]!

    """filter the rows returned"""
    where: clients_info_bool_exp
  ): [clients_info!]!
}
